// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/registry/v1/module.proto

package registryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/alipourhabibi/Hades/api/gen/api/registry/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ModuleServiceName is the fully-qualified name of the ModuleService service.
	ModuleServiceName = "hades.api.registry.v1.ModuleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ModuleServiceCreateModuleByNameProcedure is the fully-qualified name of the ModuleService's
	// CreateModuleByName RPC.
	ModuleServiceCreateModuleByNameProcedure = "/hades.api.registry.v1.ModuleService/CreateModuleByName"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	moduleServiceServiceDescriptor                  = v1.File_api_registry_v1_module_proto.Services().ByName("ModuleService")
	moduleServiceCreateModuleByNameMethodDescriptor = moduleServiceServiceDescriptor.Methods().ByName("CreateModuleByName")
)

// ModuleServiceClient is a client for the hades.api.registry.v1.ModuleService service.
type ModuleServiceClient interface {
	CreateModuleByName(context.Context, *connect.Request[v1.CreateModuleByNameRequest]) (*connect.Response[v1.CreateModuleByNameResponse], error)
}

// NewModuleServiceClient constructs a client for the hades.api.registry.v1.ModuleService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModuleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ModuleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moduleServiceClient{
		createModuleByName: connect.NewClient[v1.CreateModuleByNameRequest, v1.CreateModuleByNameResponse](
			httpClient,
			baseURL+ModuleServiceCreateModuleByNameProcedure,
			connect.WithSchema(moduleServiceCreateModuleByNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// moduleServiceClient implements ModuleServiceClient.
type moduleServiceClient struct {
	createModuleByName *connect.Client[v1.CreateModuleByNameRequest, v1.CreateModuleByNameResponse]
}

// CreateModuleByName calls hades.api.registry.v1.ModuleService.CreateModuleByName.
func (c *moduleServiceClient) CreateModuleByName(ctx context.Context, req *connect.Request[v1.CreateModuleByNameRequest]) (*connect.Response[v1.CreateModuleByNameResponse], error) {
	return c.createModuleByName.CallUnary(ctx, req)
}

// ModuleServiceHandler is an implementation of the hades.api.registry.v1.ModuleService service.
type ModuleServiceHandler interface {
	CreateModuleByName(context.Context, *connect.Request[v1.CreateModuleByNameRequest]) (*connect.Response[v1.CreateModuleByNameResponse], error)
}

// NewModuleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModuleServiceHandler(svc ModuleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moduleServiceCreateModuleByNameHandler := connect.NewUnaryHandler(
		ModuleServiceCreateModuleByNameProcedure,
		svc.CreateModuleByName,
		connect.WithSchema(moduleServiceCreateModuleByNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/hades.api.registry.v1.ModuleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ModuleServiceCreateModuleByNameProcedure:
			moduleServiceCreateModuleByNameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedModuleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModuleServiceHandler struct{}

func (UnimplementedModuleServiceHandler) CreateModuleByName(context.Context, *connect.Request[v1.CreateModuleByNameRequest]) (*connect.Response[v1.CreateModuleByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hades.api.registry.v1.ModuleService.CreateModuleByName is not implemented"))
}
