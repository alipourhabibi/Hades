// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/authorization/v1/authorization.proto

package authorizationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/alipourhabibi/Hades/api/gen/api/authorization/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthorizationName is the fully-qualified name of the Authorization service.
	AuthorizationName = "hades.api.authorization.v1.Authorization"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthorizationUserBySessionProcedure is the fully-qualified name of the Authorization's
	// UserBySession RPC.
	AuthorizationUserBySessionProcedure = "/hades.api.authorization.v1.Authorization/UserBySession"
)

// AuthorizationClient is a client for the hades.api.authorization.v1.Authorization service.
type AuthorizationClient interface {
	UserBySession(context.Context, *connect.Request[v1.UserBySessionRequest]) (*connect.Response[v1.UserBySessionResponse], error)
}

// NewAuthorizationClient constructs a client for the hades.api.authorization.v1.Authorization
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthorizationClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthorizationClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authorizationMethods := v1.File_api_authorization_v1_authorization_proto.Services().ByName("Authorization").Methods()
	return &authorizationClient{
		userBySession: connect.NewClient[v1.UserBySessionRequest, v1.UserBySessionResponse](
			httpClient,
			baseURL+AuthorizationUserBySessionProcedure,
			connect.WithSchema(authorizationMethods.ByName("UserBySession")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authorizationClient implements AuthorizationClient.
type authorizationClient struct {
	userBySession *connect.Client[v1.UserBySessionRequest, v1.UserBySessionResponse]
}

// UserBySession calls hades.api.authorization.v1.Authorization.UserBySession.
func (c *authorizationClient) UserBySession(ctx context.Context, req *connect.Request[v1.UserBySessionRequest]) (*connect.Response[v1.UserBySessionResponse], error) {
	return c.userBySession.CallUnary(ctx, req)
}

// AuthorizationHandler is an implementation of the hades.api.authorization.v1.Authorization
// service.
type AuthorizationHandler interface {
	UserBySession(context.Context, *connect.Request[v1.UserBySessionRequest]) (*connect.Response[v1.UserBySessionResponse], error)
}

// NewAuthorizationHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthorizationHandler(svc AuthorizationHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authorizationMethods := v1.File_api_authorization_v1_authorization_proto.Services().ByName("Authorization").Methods()
	authorizationUserBySessionHandler := connect.NewUnaryHandler(
		AuthorizationUserBySessionProcedure,
		svc.UserBySession,
		connect.WithSchema(authorizationMethods.ByName("UserBySession")),
		connect.WithHandlerOptions(opts...),
	)
	return "/hades.api.authorization.v1.Authorization/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthorizationUserBySessionProcedure:
			authorizationUserBySessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthorizationHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthorizationHandler struct{}

func (UnimplementedAuthorizationHandler) UserBySession(context.Context, *connect.Request[v1.UserBySessionRequest]) (*connect.Response[v1.UserBySessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hades.api.authorization.v1.Authorization.UserBySession is not implemented"))
}
